lst1[3][4]
```
lst <- list(1,2.5, "Riya", TRUE)
lst
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3][4]
```
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3][4]
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3][4]
lst <- list(1,2.5, "Riya", TRUE)
lst
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3]
```
lst <- list(1,2.5, "Riya", TRUE)
lst
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3][2]
```
lst1[3][2]
lst1[3][3]
lst<-list(a=1,b=3.5,c=TRUE,d=c(12,34))
lst
lst$d[2]
lst[4][1,2]
lst<-list(a=1,b=3.5,c=TRUE,d=c(12,34))
lst
lst$d[2]
lst[4][1]
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3][1]
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3][2]
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3](2)
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1$3[3]
lst1 <- list(a= 1, b= 3.5, c= c(1,2,3,4,5), d= F)
lst1$c[4]
lst1 <- list(1, 3.5, c(1,2,3,4,5), F)
lst1[3][4]
lst1[3][[4]]
lst1[[3][4]]
lst1[[3][4]
lst1[3][4]
lst1[3][1]
v<-c('m','f','m','f','m','f','f','f')
f<-factor(v)
f
m<- matrix(10,20,30)
m
m<-matrix(2,2,2)
m
a<-1:5
a
b<-6:10
b
c<-11:15
c
rbind(a,b,c)
cbind(a,b,c)
a1<-array(a,dim=(2,2,1))
a1<-array(a,dim=c(2,2,1))
a1
df<-dataframe(a,b,c)
df<-data.frame(a,b,c)
df
read.csv("C:\R Programming\Day 4\survey.csv")
df1<-read.csv("C:\\R Programming\\Day 4\\survey.csv")
df1
df[smoke]
df['smoke']
df['Smoke']
df1['Smoke']
countSMoke<-function(s)
{}
countSMoke<-function(s)
{for 'Never' in s{} }
countSMoke<-function(s)
{ for('Smoke' in s){}}
countSMoke<-function(s)
{ cnt = 0 for('Smoke' in s){ cnt=cnt+1} return cnt}
df1<-read.csv("C:\\R Programming\\Day 4\\survey.csv")
countSMoke<-function(s, n){
cnt = 0
for(n in s){
cnt=cnt+1
}return(cnt)
for(i in 1:5){}
for(i in 1:5){for(n in 6:10){print (i,n)}}
for(i in 1:5){for(n in 6:10){print (i) print(n)}}
for(i in 1:5){
for(n in 6:10){
print (i)
print(n)}
}
dt1<-as.Date("1970-01-01")
dt1
class(dt1)
unclass(dt1)
dt1
dt2<-as.Date("2022-11-12")
dt2
unclass(dt2)
Sys.Date()
df1
dft<-as.tibble(df1)
dft<-as_tibble(df1)
dft
arrange(dft,Age)
arrange(dft,desc (Age))
select(dft,Sex)
filter(dft, Smoke=="Never")
filter(dft, Age>60)
df_age<-filter(dft, Age>60)
df_senior<-mutate(df_age, Senior=T)
df_senior
gc()
gc()
shiny::runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
passwordInput("password", "Password:"),
actionButton("go", "Go"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({
req(input$go)
isolate(input$password)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "mm/dd/yy",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
if (interactive()) {
shinyApp(
ui = basicPage(
numericInput("num", label = "Make changes", value = 1),
submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inRadioButtons
# Can also set the label and select items
updateRadioButtons(session, "inRadioButtons2",
label = paste("radioButtons label", x),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
library(ggplot2)
# single selection
shinyApp(
ui = fluidPage(
varSelectInput("variable", "Variable:", mtcars),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
# multiple selections
if (FALSE) {
shinyApp(
ui = fluidPage(
varSelectInput("variables", "Variable:", mtcars, multiple = TRUE),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
if (length(input$variables) == 0) return(mtcars)
mtcars %>% dplyr::select(!!!input$variables)
}, rownames = TRUE)
}
)}
}
## Only run examples in interactive R sessions
if (interactive()) {
# Show a message when button is clicked
shinyApp(
ui = fluidPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
# App with show and remove buttons
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
}
# App with show and remove buttons
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A queue of notification IDs
ids <- character(0)
# A counter
n <- 0
observeEvent(input$show, {
# Save the ID for removal later
id <- showNotification(paste("Message", n), duration = NULL)
ids <<- c(ids, id)
n <<- n + 1
})
observeEvent(input$remove, {
if (length(ids) > 0)
removeNotification(ids[1])
ids <<- ids[-1]
})
}
)
# Show a message when button is clicked
shinyApp(
ui = bootstrapPage(
actionButton("show", "Show")
),
server = function(input, output) {
observeEvent(input$show, {
showNotification("Message text",
action = a(href = "javascript:location.reload();", "Reload page")
)
})
}
)
# single selection
shinyApp(
ui = bootstrapPage(
varSelectInput("variable", "Variable:", mtcars),
plotOutput("data")
),
server = function(input, output) {
output$data <- renderPlot({
ggplot(mtcars, aes(!!input$variable)) + geom_histogram()
})
}
)
ui <- bootstrapPage(
p("The first radio button group controls the second"),
radioButtons("inRadioButtons", "Input radio buttons",
c("Item A", "Item B", "Item C")),
radioButtons("inRadioButtons2", "Input radio buttons 2",
c("Item A", "Item B", "Item C"))
)
shinyApp(
ui = bootstrapPage(
numericInput("num", label = "Make changes", value = 1),
submitButton("Update View", icon("refresh")),
helpText("When you click the button above, you should see",
"the output below update to reflect the value you",
"entered at the top:"),
verbatimTextOutput("value")
),
server = function(input, output) {
# submit buttons do not have a value of their own,
# they control when the app accesses values of other widgets.
# input$num is the value of the number widget.
output$value <- renderPrint({ input$num })
}
)
ui <- bootstrapPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "mm/dd/yy",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- bootstrapPage(
dateRangeInput("daterange1", "Date range:",
start = "2001-01-01",
end   = "2010-12-31"),
# Default start and end is the current date in the client's time zone
dateRangeInput("daterange2", "Date range:"),
# start and end are always specified in yyyy-mm-dd, even if the display
# format is different
dateRangeInput("daterange3", "Date range:",
start  = "2001-01-01",
end    = "2010-12-31",
min    = "2001-01-01",
max    = "2012-12-21",
format = "mm/dd/yy",
separator = " - "),
# Pass in Date objects
dateRangeInput("daterange4", "Date range:",
start = Sys.Date()-10,
end = Sys.Date()+10),
# Use different language and different first day of week
dateRangeInput("daterange5", "Date range:",
language = "de",
weekstart = 1),
# Start with decade view instead of default month view
dateRangeInput("daterange6", "Date range:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
ui <- bootstrapPage(
passwordInput("password", "Password:"),
actionButton("go", "Go"),
verbatimTextOutput("value")
)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- bootstrapPage(
passwordInput("password", "Password:"),
actionButton("go", "Go"),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({
req(input$go)
isolate(input$password)
})
}
shinyApp(ui, server)
}
ui <- bootstrapPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- bootstrapPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
install.packages("shinythemes")
runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
runApp('C:/Adv Analytics/Day 6/akashapp')
setwd("C:/Adv Analytics/Datasets/")
boston <- read.csv("Boston.csv")
View(boston)
View(boston)
runApp('C:/Adv Analytics/Day 6/bostonapp')
names(boston)
runApp('C:/Adv Analytics/Day 6/bostonapp')
runApp('C:/Adv Analytics/Day 6/bostonapp')
runApp('C:/Adv Analytics/Day 6/bostonapp')
runApp('C:/Adv Analytics/Day 6/bostonggapp')
runApp('C:/Adv Analytics/Day 6/bostonggapp')
runApp('C:/Adv Analytics/Day 6/bostonggapp')
runApp('C:/Adv Analytics/Day 6/bostonggapp')
runApp('C:/Adv Analytics/Day 6/boxplotbostonapp')
runApp('C:/Adv Analytics/Day 6/boxplotbostonapp')
runApp('C:/Adv Analytics/Day 6/twoggplotapp')
runApp('C:/Adv Analytics/Day 6/twoggplotapp')
names(colors)
colors()
runApp('C:/Adv Analytics/Day 6/twoggplotapp')
runApp('C:/Adv Analytics/Day 6/twoggplotapp')
runApp('C:/Adv Analytics/Day 6/twoggplotapp')
runApp('C:/Adv Analytics/Day 6/twoggplotapp')
runApp('C:/Adv Analytics/Day 6/tabsetapp')
runApp('C:/Users/admin/Desktop/Scatter')
runApp('C:/Users/admin/Desktop/Scatter')
runApp('C:/Users/admin/Desktop/Scatter')
runApp('C:/Users/admin/Desktop/Scatter')
runApp('C:/Users/admin/Desktop/Scatter')
runApp('C:/Users/admin/Desktop/Scatter')
runApp('C:/Users/admin/Desktop/Scatter')
runApp('C:/Users/admin/Desktop/Scatter/scatter_ggplot_cars93')
